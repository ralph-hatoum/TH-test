{
  "openapi": "3.0.0",
  "info": {
    "title": "Encryption and Signature API",
    "description": "API for encrypting, decrypting, signing, and verifying data payloads.",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:8000",
      "description": "Local development server"
    }
  ],
  "paths": {
    "/encrypt": {
      "post": {
        "summary": "Encrypt data",
        "description": "This endpoint expects a json payload, and will return a payload with the same fields, but with encrypted values.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "foo": {
                    "type": "string"
                  },
                  "bar": {
                    "type": "object"
                  }
                }
              }
            }
        }
        },
        "responses": {
          "200": {
            "description": "Successful encryption",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "foo": {
                      "type": "string"
                    },
                    "bar": {
                      "type":"string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/decrypt": {
      "post": {
        "summary": "Decrypt data",
        "description": "This endpint expects a json payload, and will return a payload with the same fields, but with decrypted values, if decryption is possible. Limitations : if a plaintext string happens to fit what an encrypted string looks like, it will be decrypted. For example, with base64, any string that fits the regex ^[-A-Za-z0-9+/]*={0,3}$ will be decrypted. Also, all elements returned in the decrypted payload will be returned as strings.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "foo": {
                    "type": "string"
                  },
                  "bar": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful decryption",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "foo": {
                      "type": "string"
                    },
                    "bar": {
                      "type":"object"
                    }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    }
    },
    "/sign": {
      "post": {
        "summary": "Sign data",
        "description": "Signs a JSON payload and returns the signature. Important : the decrypt function is called on the payload before signing, so similar limitations apply : if a plaintext string happens to fit what an encrypted string looks like, it will be decrypted. For example, with base64, any string that fits the regex ^[-A-Za-z0-9+/]*={0,3}$ will be decrypted.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "foo": {
                    "type": "string"
                  },
                  "bar": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful signing",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "signature": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/verify": {
      "post": {
        "summary": "Verify signature",
        "description": "Verifies the signature of a JSON payload.     The payload needs to have a signature field and a data field. If these are not provided, the request will not be processed. Succesful signature will return a 204 status code, other cases will be a 400.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "signature": {
                    "type": "string"
                  },
                  "data": {
                    "type": "object"
                  }
                },
                "required": ["signature", "data"]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Valid signature"
          },
          "400": {
            "description": "Bad request or invalid signature"
          }
        }
      }
    }
  }
}
